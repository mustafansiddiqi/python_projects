import numpy as np
from numpy import genfromtxt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.models import load_model
from sklearn.metrics import confusion_matrix, classification_report

# Load dataset
# The dataset contains numerical features extracted from banknote images
# Last column is the label (0: authentic, 1: fake)
data = genfromtxt('../DATA/bank_note_data.txt', delimiter=',')

# Split data into features and labels
labels = data[:, 4]  # Last column is the label
dataset_features = data[:, 0:4]  # First 4 columns are features

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(dataset_features, labels, test_size=0.33, random_state=42)

# Normalize the feature data to be between 0 and 1
scaler = MinMaxScaler()
scaler.fit(X_train)
scaled_X_train = scaler.transform(X_train)
scaled_X_test = scaler.transform(X_test)

# Build a simple neural network using Keras
model = Sequential()
model.add(Dense(4, input_dim=4, activation='relu'))  # First hidden layer with 4 neurons
model.add(Dense(8, activation='relu'))  # Second hidden layer with 8 neurons
model.add(Dense(1, activation='sigmoid'))  # Output layer (binary classification)

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model with training data
model.fit(scaled_X_train, y_train, epochs=50, verbose=2)

# Evaluate model performance
loss, accuracy = model.evaluate(scaled_X_test, y_test)
print(f'Model Loss: {loss}, Accuracy: {accuracy}')

# Predict on test data
predictions = model.predict(scaled_X_test)
predicted_classes = np.where(predictions > 0.5, 1, 0)

# Compute confusion matrix and classification report
conf_matrix = confusion_matrix(y_test, predicted_classes)
print("Confusion Matrix:\n", conf_matrix)
print("Classification Report:\n", classification_report(y_test, predicted_classes))

# Save the trained model
model.save('myfirstmodel.h5')

# Load the saved model
new_model = load_model('myfirstmodel.h5')

# Use the loaded model for predictions
new_predictions = new_model.predict(scaled_X_test)
new_predicted_classes = np.where(new_predictions > 0.5, 1, 0)

# Print the first 5 predictions
print("First 5 Predictions:\n", new_predictions[:5])
